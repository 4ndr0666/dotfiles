#!/usr/bin/env zsh
# File: ytdl.zsh
# Author: 4ndr0666
# =============== // YTDL.ZSH //  (Approx. 220 lines) 

## Config Maps
typeset -A YTDLP_COOKIES_MAP=(
  ["youtube.com"]="$HOME/.config/yt-dlp/youtube_cookies.txt"
  ["youtu.be"]="$HOME/.config/yt-dlp/youtube_cookies.txt"
  ["patreon.com"]="$HOME/.config/yt-dlp/patreon_cookies.txt"
  ["vimeo.com"]="$HOME/.config/yt-dlp/vimeo_cookies.txt"
  ["boosty.to"]="$HOME/.config/yt-dlp/boosty_cookies.txt"
  ["instagram.com"]="$HOME/.config/yt-dlp/instagram_cookies.txt"
  ["fanvue.com"]="$HOME/.config/yt-dlp/fanvue_cookies.txt"
)

PREFERRED_FORMATS=("335" "315" "313" "308" "303" "299" "302" "271" "248" "137")

### Validate URL format.
# Checks if the URL begins with http:// or https://.
validate_url() {
  local url="$1"
  if [[ "$url" =~ ^https?:// ]]; then
    return 0
  else
    return 1
  fi
}

### Normalize domain.
# Extracts the domain from the URL and forces fanvue domains to "fanvue.com".
get_domain_from_url() {
  local url="$1"
  # strip protocol
  local domain="${url#*://}"
  # strip path
  domain="${domain%%/*}"
  # remove www. or m.
  domain="${domain#www.}"
  domain="${domain#m.}"
  # lowercase
  domain="${(L)domain}"
  # if fanvue variant, normalize
  if [[ "$domain" == fanvue.com ]]; then
    echo "fanvue.com"
  else
    echo "$domain"
  fi
}

### Retrieve cookie file path based on domain.
get_cookie_path_for_domain() {
  local domain="$1"
  echo "${YTDLP_COOKIES_MAP[$domain]}"
}

### Refresh cookie file using clipboard.
# Prompts the user to copy the current cookie content and writes it to the mapped cookie file.
refresh_cookie_file() {
  local domain="$1"
  if [[ -z "$domain" ]]; then
    echo "Usage: refresh_cookie_file <domain>"
    return 1
  fi
  local cookie_file
  cookie_file=$(get_cookie_path_for_domain "$domain")
  if [[ -z "$cookie_file" ]]; then
    echo "❌ Error: No cookie file mapped for domain '$domain'." >&2
    return 1
  fi
  local clipboard_cmd
  if command -v wl-paste >/dev/null 2>&1; then
    clipboard_cmd="wl-paste"
  elif command -v xclip >/dev/null 2>&1; then
    clipboard_cmd="xclip -selection clipboard -o"
  else
    echo "❌ Error: No suitable clipboard utility found. Install 'wl-clipboard' or 'xclip'." >&2
    return 1
  fi
  echo "➡️ Copy current cookie file for '$domain' to your clipboard, then press Enter."
  read -r
  local clipboard_data
  clipboard_data=$($clipboard_cmd 2>/dev/null || true)
  if [[ -z "$clipboard_data" ]]; then
    echo "❌ Error: Clipboard is empty or unreadable." >&2
    return 1
  fi
  mkdir -p "${cookie_file:h}"
  echo "$clipboard_data" >| "$cookie_file" || { echo "❌ Error: Could not write to '$cookie_file'." >&2; return 1; }
  chmod 600 "$cookie_file" >/dev/null 2>&1 || echo "❌ Warning: Could not secure '$cookie_file'." >&2
  echo "✅ Cookie file for '$domain' updated successfully!"
}

### Prompt user to update cookies.
# Uses fzf if available for fuzzy selection; otherwise, numeric selection.
prompt_cookie_update() {
  echo "Select the domain to update cookies for:"
  local domains
  domains=("${(@k)YTDLP_COOKIES_MAP}")
  if command -v fzf >/dev/null 2>&1; then
    local selection
    selection=$(printf "%s\n" "${domains[@]}" | fzf --prompt="Domain: ")
    if [[ -n "$selection" ]]; then
      refresh_cookie_file "$selection"
      return $?
    else
      echo "❌ No selection made." >&2
      return 1
    fi
  else
    local idx=1 domain
    for d in "${domains[@]}"; do
      echo "  $idx) $d"
      ((idx++))
    done
    read -r "?Enter choice [1-$((idx-1))]: " choice
    if [[ "$choice" =~ ^[0-9]+$ ]] && (( choice>=1 && choice<idx )); then
      domain="${domains[choice-1]}"
    else
      for d in "${domains[@]}"; do
        if [[ "$d" == "$choice" ]]; then
          domain="$d"
          break
        fi
      done
    fi
    if [[ -z "$domain" ]]; then
      echo "❌ Invalid selection: $choice" >&2
      return 1
    fi
    refresh_cookie_file "$domain"
  fi
}

### Select best format.
# For fanvue.com, forces "best" as default.
select_best_format() {
  local url="$1" cfile="$2"
  local domain
  domain=$(get_domain_from_url "$url")
  if [[ "$domain" == "fanvue.com" ]]; then
    echo "best"
    return
  fi
  local formats_json
  formats_json=$(yt-dlp -j --cookies "$cfile" "$url" 2>/dev/null || true)
  if [[ -z "$formats_json" ]]; then
    echo "best"
    return
  fi
  local fmt
  for fmt in "${PREFERRED_FORMATS[@]}"; do
    if echo "$formats_json" | jq -e --arg f "$fmt" '.formats[] | select(.format_id == $f)' >/dev/null 2>&1; then
      echo "$fmt"
      return
    fi
  done
  echo "best"
}

### Get detailed format information.
get_format_details() {
  local url="$1" cfile="$2" fmtid="$3"
  if [[ "$fmtid" == "best" ]]; then
    echo "N/A"
    return
  fi
  local out
  out=$(yt-dlp -j -f "$fmtid" --cookies "$cfile" "$url" 2>/dev/null || true)
  if [[ -z "$out" ]]; then
    echo "N/A"
    return
  fi
  echo "$out" | jq '{format_id, ext, resolution, fps, tbr, vcodec, acodec, filesize}'
}

### ytdl: Quick download.
# Supports -c flag to force using cookies.
ytdl() {
  local use_cookie=0 args=()
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -c) use_cookie=1; shift ;;
      *) args+=("$1"); shift ;;
    esac
  done
  local url="${args[1]}"
  if (( use_cookie )); then
    local domain cookie_file
    domain=$(get_domain_from_url "$url")
    cookie_file=$(get_cookie_path_for_domain "$domain")
    if [[ -n "$cookie_file" && -f "$cookie_file" ]]; then
      yt-dlp --add-metadata --embed-metadata --external-downloader aria2c \
        --external-downloader-args "aria2c:-c -j8 -x8 -s8 -k2M" \
        -f "335/315/313/308/303/299/271/248/137+bestaudio+bestaudio" \
        --newline --ignore-config --no-playlist --no-mtime \
        --cookies "$cookie_file" "${args[@]}"
      return $?
    fi
  fi
  yt-dlp --add-metadata --embed-metadata --external-downloader aria2c \
    --external-downloader-args "aria2c:-c -j8 -x8 -s8 -k2M" \
    -f "335/315/313/308/303/299/271/248/137+bestaudio+bestaudio" \
    --newline --ignore-config --no-playlist --no-mtime "${args[@]}"
}

### ytf: Interactive command.
# Lists available formats and prompts for selection. If no input, runs native download.
ytf() {
  local url="$1"
  if [[ -z "$url" ]]; then
    echo "Usage: ytf <URL>"
    return 1
  fi
  if ! validate_url "$url"; then
    echo "❌ Error: Invalid URL: $url" >&2
    return 1
  fi
  local domain cookie_file output
  domain=$(get_domain_from_url "$url")
  cookie_file=$(get_cookie_path_for_domain "$domain")
  if [[ -n "$cookie_file" && -f "$cookie_file" ]]; then
    output=$(yt-dlp --list-formats --cookies "$cookie_file" "$url")
  else
    output=$(yt-dlp --list-formats "$url")
  fi
  echo "$output"; echo
  read -r "?Enter the desired format ID (press Enter for default): " format_id
  if [[ -z "$format_id" ]]; then
    ytdl "$url"
  else
    ytdl "$url" -f "$format_id"
  fi
}

### Helper: Advanced download.
attempt_advanced_download() {
  local url="$1" cookie_file="$2" bestf="$3" odir="$4"; shift 4
  yt-dlp --add-metadata --embed-metadata --external-downloader aria2c \
    --external-downloader-args "aria2c:-c -j8 -x8 -s8 -k2M" \
    -f "${bestf}+bestaudio+bestaudio" \
    --newline --ignore-config --no-playlist --no-mtime \
    --cookies "$cookie_file" \
    --output "${odir}/%(title)s.%(ext)s" "$url"
}

### ytdlc: Advanced download with fallback.
# Minimalist design: if fanvue.com, fallback to native yt-dlp.
ytdlc() {
  if [[ $# -eq 0 ]]; then
    show_ytdlc_help
    return 0
  fi
  local listfmt=0 odir="$HOME/Downloads" update_mode=0
  typeset -a extra_args urls
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --list-formats|-l) listfmt=1; shift ;;
      --output-dir|-o) odir="$2"; shift 2 ;;
      --update) update_mode=1; shift ;;
      --help|-h) show_ytdlc_help; return 0 ;;
      -f) extra_args+=("$1" "$2"); shift 2 ;;
      *) urls+=("$1"); shift ;;
    esac
  done
  if (( update_mode )); then
    prompt_cookie_update
    return 0
  fi
  if (( ${#urls[@]} == 0 )); then
    echo "❌ No URLs specified."; show_ytdlc_help; return 1
  fi
  mkdir -p "$odir" || { echo "❌ Error: Could not create '$odir'." >&2; return 1; }
  for url in "${urls[@]}"; do
    echo "----------------------------------------"
    echo "Analyzing URL: $url"
    if ! validate_url "$url"; then
      echo "❌ Error: Invalid URL: $url"; continue
    fi
    local domain cookie_file
    domain=$(get_domain_from_url "$url")
    cookie_file=$(get_cookie_path_for_domain "$domain")
    if [[ -z "$cookie_file" ]]; then
      echo "❌ Error: No cookie file mapped for domain '$domain'." >&2
      echo "➡️ Use 'ytdlc --update' to add or refresh cookie files."
      continue
    fi
    if [[ ! -f "$cookie_file" ]]; then
      echo "❌ Cookie file not found at '$cookie_file'." >&2
      echo "➡️ Use 'ytdlc --update' and paste the new cookie for '$domain'."
      continue
    fi
    chmod 600 "$cookie_file" 2>/dev/null || echo "❌ Warning: Could not secure '$cookie_file'." >&2
    if (( listfmt )); then
      echo "➡️ Listing available formats for '$url':"
      ytf "$url"
      echo "----------------------------------------"
      continue
    fi
    local bestf fmt_info exit_adv exit_simple
    bestf=$(select_best_format "$url" "$cookie_file")
    printf "✔️ Selected format ID: %s\n" "$bestf"
    if [[ "$bestf" != "best" ]]; then
      fmt_info=$(get_format_details "$url" "$cookie_file" "$bestf")
      echo "Format details:"; echo "$fmt_info"; echo ""
    else
      echo "Format details: N/A"; echo ""
    fi
    echo "➡️ Attempting advanced download for '$url'..."
    attempt_advanced_download "$url" "$cookie_file" "$bestf" "$odir" "${extra_args[@]}"
    exit_adv=$?
    if (( exit_adv == 0 )); then
      printf "✔️ Advanced download completed successfully for '%s'.\n" "$url"
    else
      echo "❌ Advanced download failed for '$url'. Falling back to simple download..." >&2
      ytdl "$url"
      exit_simple=$?
      if (( exit_simple == 0 )); then
        printf "✔️ Fallback download (ytdl) succeeded for '%s'.\n" "$url"
      else
        echo "❌ Fallback download also failed for '%s'. Skipping." >&2
      fi
    fi
    echo "----------------------------------------"
  done
}

### Help for ytdlc.
show_ytdlc_help() {
  cat <<'EOF'
Usage: ytdlc [options] <URL> [<URL> ...]
Advanced downloads with domain-based cookies, interactive format selection, and fallback logic.

Options:
  --list-formats, -l      Only list available formats, do not download.
  --output-dir, -o <dir>  Specify a custom output directory (default: ~/Downloads).
  --update                Interactively update a cookie file, then exit.
  --help, -h              Show this help text.

Examples:
  ytdlc --update
  ytdlc --list-formats https://youtu.be/abc123
  ytdlc --output-dir /tmp https://patreon.com/page
  ytdlc https://patreon.com/page -f 303
EOF
}
