# --- // KILL_PROCESS:
function copypath {
  # If no argument passed, use current directory
  local file="${1:-.}"

  # If argument is not an absolute path, prepend $PWD
  [[ $file = /* ]] || file="$PWD/$file"

  # Copy the absolute path without resolving symlinks
  # If clipcopy fails, exit the function with an error
  print -n "${file:a}" | clipcopy || return 1

  echo ${(%):-"%B${file:a}%b copied to clipboard."}
}

function undo() {
    echo "Fetching the most recently installed packages..."
    local -a recent_packages
    recent_packages=("${(@f)$(expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort -r | head -n 20 | awk '{print $3}')}")
    
    if (( ${#recent_packages[@]} == 0 )); then
        echo "No recent packages found."
        return
    fi

    echo "Most recently installed packages are:"
    local idx=1
    for pkg in "${recent_packages[@]}"; do
        echo "${idx}) $pkg"
        ((idx++))
    done

    echo "Proceed with primary removal method 'pacman -Rdd' (does not remove dependencies)? [y/N]:"
    read response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        sudo pacman -Rdd "${recent_packages[@]}"
        echo "Packages removed with 'pacman -Rdd'. Orphaned dependencies are not removed."
    else
        echo "Primary removal canceled."
    fi

    echo "Do you want to remove unneeded dependencies with 'pacman -Rns'? [y/N]:"
    read response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        local orphans=("${(@f)$(pacman -Qdtq)}")
        if (( ${#orphans[@]} > 0 )); then
            echo "Removing unneeded dependencies..."
            sudo pacman -Rns "${orphans[@]}"
            echo "Unneeded dependencies removed."
        else
            echo "No unneeded dependencies to remove."
        fi
    else
        echo "Additional cleanup canceled."
    fi
}
# ----------------------------------------------------- // BOOST_SYSTEM_RESOURCES:
function sysboost() {
    set -e
    echo "Optimizing resources in 3sec."
    sleep 2
    echo "3..."
    sleep 2
    echo "2.."
    sleep 2
    echo "1"
    sleep 2
    (( $+commands[systemctl] )) && {
        echo "Resetting all failed SystemD units.."
        sleep 2
    systemctl reset-failed || true
    }
    if command -v dbus-cleanup-sockets &> /dev/null; then
        echo "Clearing unnecessary Dbus sockets..."
        sleep 2
    sudo dbus-cleanup-sockets
    else
        echo "Dbus-cleanup-sockets not found, skipping cleanup."
    sleep 2
    fi

    if  sudo find -L /etc/systemd/ -type l -delete; then
        echo "Removing broken SystemD links...."
        sleep 2
    else
    echo "Unable to search SystemD for broken links."
    sleep 2
    fi

    if command -v zps &> /dev/null; then
        echo "Killing all zombies....."
        sleep 2
    sudo zps -r --quiet
    else
        echo "To kill zombies, zps is required 'sudo pacman -S zps --noconfirm'. Skipping"
    sleep 2
    fi

    if command -v systemctl &> /dev/null; then
        echo "Reloading system daemon......"
    sleep 2
    sudo systemctl daemon-reload
    else
        echo "systemctl not found, skipping daemon reload."
    sleep 2
    fi

    if command -v journalctl &> /dev/null; then
        echo "Removing logs older than 2 days......."
    sleep 2
    sudo journalctl --vacuum-time=2d # Keeps 2 days of logs
    fi

    if command -v tmpwatch &> /dev/null; then
        echo "Clearing /tmp files older than 2hr........"
    sleep 2
    sudo tmpwatch 2h /tmp # Adjust time as needed
    elif command -v tmpreaper &> /dev/null; then
        echo "Clearing /tmp files older than 2hr........"
    sleep 2
    sudo tmpreaper 2h /tmp # Adjust time as needed
    fi

    echo "Resources optimized."
    set +e
}

# ---------------------------------------------------------- // SYS_BOOST2:
 # taken from $LINUX-KERNELSOURCE/Documentation/power/swsusp.txt
function swapboost() {
    if [[ ! -r /proc/1/maps ]]; then
        echo "Auto-escalating for dir access of /proc/1/maps."
        if ! sudo test -r /proc/1/maps; then
            echo "Unable to escalate privileges."
            return 1
        fi
    fi

    echo "Scanning file mappings.."
    sleep 2
    local file_count=0
    local cmd_prefix=""
    [[ $EUID -ne 0 ]] && cmd_prefix="sudo"
    for file in $(sed -ne 's:.* /:/:p' /proc/[0-9]*/maps | sort -u | grep -v '^/dev/'); do
        $cmd_prefix cat "$file" > /dev/null && ((file_count++))
    done
    echo "Accessed $file_count files from mappings..."
    sleep 2
    echo 'Refreshing swap spaces....'
    sleep 2
    $cmd_prefix swapoff -a && $cmd_prefix swapon -a
    echo "Swap spaces refreshed!"
}

function findit() {
    echo "Do you want to find a file (f) or a directory (d)?"
    read -r choice
    case $choice in
        f)
            echo "Enter the filename to search for:"
            read -r filename
            if [[ -n $filename ]]; then
                sudo find / -type f -iname "*$filename*" 2>/dev/null
            else
                echo "Filename cannot be empty."
            fi
            ;;
        d)
            echo "Enter the directory name to search for:"
            read -r dirname
            if [[ -n $dirname ]]; then
                sudo find / -type d -iname "*$dirname*" 2>/dev/null
            else
                echo "Directory name cannot be empty."
            fi
            ;;
        *)
            echo "Invalid choice. Please select 'f' for file or 'd' for directory."
            ;;
    esac
}

# -------------------------------------------------------- // SYSTEMD_COMPLETIONS:
user_commands=(
  cat
  get-default
  help
  is-active
  is-enabled
  is-failed
  is-system-running
  list-dependencies
  list-jobs
  list-sockets
  list-timers
  list-unit-files
  list-units
  show
  show-environment
  status
)

sudo_commands=(
  add-requires
  add-wants
  cancel
  daemon-reexec
  daemon-reload
  default
  disable
  edit
  emergency
  enable
  halt
  import-environment
  isolate
  kexec
  kill
  link
  list-machines
  load
  mask
  preset
  preset-all
  reenable
  reload
  reload-or-restart
  reset-failed
rescue
  restart
  revert
  set-default
  set-environment
  set-property
  start
  stop
  switch-root
  try-reload-or-restart
  try-restart
  unmask
  unset-environment
)

power_commands=(
  hibernate
  hybrid-sleep
  poweroff
  reboot
  suspend
)

for c in $user_commands; do
  alias "sc-$c"="systemctl $c"
  alias "scu-$c"="systemctl --user $c"
done

for c in $sudo_commands; do
  alias "sc-$c"="sudo systemctl $c"
  alias "scu-$c"="systemctl --user $c"
done

for c in $power_commands; do
  alias "sc-$c"="systemctl $c"
done

unset c user_commands sudo_commands power_commands

alias sc-enable-now="sc-enable --now"
alias sc-disable-now="sc-disable --now"
alias sc-mask-now="sc-mask --now"
alias scu-enable-now="scu-enable --now"
alias scu-disable-now="scu-disable --now"
alias scu-mask-now="scu-mask --now"
alias scu-failed='systemctl --user --failed'
alias sc-failed='systemctl --failed'

function systemd_prompt_info {
  local unit
  for unit in "$@"; do
    echo -n "$ZSH_THEME_SYSTEMD_PROMPT_PREFIX"

    if [[ -n "$ZSH_THEME_SYSTEMD_PROMPT_CAPS" ]]; then
      echo -n "${(U)unit:gs/%/%%}:"
    else
      echo -n "${unit:gs/%/%%}:"
    fi

    if systemctl is-active "$unit" &>/dev/null; then
      echo -n "$ZSH_THEME_SYSTEMD_PROMPT_ACTIVE"
    elif systemctl --user is-active "$unit" &>/dev/null; then
      echo -n "$ZSH_THEME_SYSTEMD_PROMPT_ACTIVE"
    else
      echo -n "$ZSH_THEME_SYSTEMD_PROMPT_NOTACTIVE"
    fi

    echo -n "$ZSH_THEME_SYSTEMD_PROMPT_SUFFIX"
  done
}


# --- // DOWNSCALE_TO_1080P:
function downscale() {
    local input_file="$1"
    local output_file="${2:-output.mp4}"
    local quality="${3:-18}"  # Default quality set to 23, can be adjusted by the user

    # Validate input file presence
    if [[ -z "$input_file" ]]; then
        echo "Usage: downscale <path/to/media> [output_file_path] [quality]"
        return 1
    fi

    # Using FFmpeg to downscale or fit the video into 1920x1080 resolution
    # with padding if necessary, keeping the original aspect ratio.
    # Improvements:
    # - Allows user to specify quality.
    # - 'veryslow' preset for the best compression efficiency at the cost of speed.
    ffmpeg -i "$input_file" \
           -vf "scale=1920x1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2" \c:v libx264 -crf "$quality" -preset veryslow "$output_file"
    echo "Downscale complete. Output saved to '$output_file'."
}

# ------------------------------------------------------------------- // Extract:
function xt() {
    clear
    tput cup $(($(tput lines)/3))
    tput bold
    printf "%s\n\t" "$fx"
    printf "\033[0;36mExtract? [y/N]: \033[0m"
    read ans
    [ "$ans" = "y" ] && {
    case $fx in
      *.tar.bz2)   tar xjf $fx    ;;
      *.tar.gz)    tar xzf $fx    ;;
      *.bz2)       bunzip2 $fx    ;;
      *.rar)       unrar x $fx    ;;
      *.gz)        gunzip $fx     ;;
      *.tar)       tar xf $fx     ;;
      *.tbz2)      tar xjf $fx    ;;
      *.tgz)       tar xzf $fx    ;;
      *.zip)       unzip $fx      ;;
      *.Z)         uncompress $fx ;;
      *.7z)        7z x $fx       ;;
      *.deb)       ar x $fx       ;;
      *.tar.xz)    tar xf $fx     ;;
      *.tar.zst)   tar xf $fx     ;;
      *)           echo "'$fx' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$fx' is not a valid file"
  fi
}

# -------------------------------------------------------------------------- // Cd and ls:
cl() {
    # Default to HOME directory if no argument is provided
    local dir="${1:-$HOME}"

    # Check if the argument is a directory or a symbolic link to a directory
    if [[ -d "$dir" || -L "$dir" ]]; then
        cd "$dir" && lsd
    else
        # Standardized error message
        echo "zsh: cl: '$dir': No such file or directory"
    fi
}

# ------------------------------------------------------------------------ // Github menu:

# Helper Functions
check_and_setup_ssh() {
  local ssh_key="${HOME}/.ssh/id_ed25519"

  if [ -f "$ssh_key" ]; then
    echo "SSH key exists."
  else
    echo "SSH key not found. Creating one now..."
    ssh-keygen -t ed25519 -C "your_email@example.com" -f "$ssh_key"
    eval "$(ssh-agent -s)"
    ssh-add "$ssh_key"

    echo "Uploading the SSH key to GitHub..."
    # Assuming GitHub CLI is installed and configured
    gh auth login
    gh ssh-key add "$ssh_key.pub"
  fi
}

list_and_manage_remotes() {
  echo "Current Git remotes:"
  git remote -v

  # List remotes and ask the user if they want to remove any
  echo "Would you like to remove any remotes? (yes/no):"
  read -r response

  if [[ "$response" =~ ^[Yy](es)?$ ]]; then
    echo "Enter the name of the remote to remove (leave blank to cancel):"
    read -r remote_to_remove

    if [[ -n "$remote_to_remove" ]]; then
      if git remote | grep -q "^$remote_to_remove$"; then
        git remote remove "$remote_to_remove"
        echo "Remote '$remote_to_remove' has been removed."
      else
        echo "Remote '$remote_to_remove' not found."
      fi
    else
      echo "No remotes removed."
    fi
  else
    echo "No changes made to remotes."
  fi
}

switch_to_ssh() {
  local old_url new_url

  # Get a list of all remotes and use fzf to select one
  local remote_name=$(git remote | fzf --height=10 --prompt="Select a remote: ")

  # Check if a remote was selected
  if [[ -z "$remote_name" ]]; then
    echo "No remote selected."
    return
  fi

  old_url=$(git remote get-url "$remote_name")

  # Check if the current URL is already using SSH
  if [[ "$old_url" == git@github.com:* ]]; then
    echo "The remote '$remote_name' is already using SSH."
    return
  fi

  # Extract the username and repository from the old URL
  local user_repo=${old_url#*github.com/}

  # Remove any trailing ".git"
  user_repo=${user_repo%.git}

  new_url="git@github.com:$user_repo.git"

  git remote set-url "$remote_name" "$new_url"

  echo "Switched '$remote_name' to use SSH: $new_url"
}

update_remote_url() {
  local repo_base="https://www.github.com/4ndr0666/"
  local repos=$(gh repo list 4ndr0666 -L 100 --json name -q '.[].name')

  echo "Enter the repository name:"
  local repo_name
  repo_name=$(echo "$repos" | fzf --height=10 --prompt="Select a repository: ")

  local new_url="${repo_base}${repo_name}.git"
  git remote set-url origin "$new_url"
  echo "Remote URL updated to $new_url"
}

fetch_from_remote() {
  echo "Fetching updates from remote..."
  git fetch origin
  echo "Fetch complete."
}

pull_from_remote() {
  local current_branch=$(git branch --show-current)
  echo "Pulling updates from remote for branch '$current_branch'..."
  git pull origin "$current_branch"
  echo "Pull complete."
}

push_to_remote() {
  local current_branch=$(git branch --show-current)
  echo "Pushing local branch '$current_branch' to remote..."
  git push -u origin "$current_branch"
  echo "Push complete."
}

list_branches() {
  echo "Available branches:"
  git branch
}

switch_branch() {
  echo "Enter branch name to switch to:"
  read -r branch_name

  if git branch --list "$branch_name" > /dev/null; then
    git checkout "$branch_name"
    echo "Switched to branch '$branch_name'."
  else
    echo "Branch '$branch_name' does not exist."
  fi
}

create_new_branch() {
  echo "Enter new branch name:"
  read -r new_branch
  git checkout -b "$new_branch"
  echo "Branch '$new_branch' created and checked out."
}

delete_branch() {
  echo "Enter branch name to delete:"
  read -r del_branch

  if git branch --list "$del_branch" > /dev/null; then
    git branch -d "$del_branch"
    echo "Branch '$del_branch' deleted."
  else
    echo "Branch '$del_branch' does not exist."
  fi
}

reconnect_old_repo() {
  echo "Do you know the remote URL or name? (URL/Name):"
  read -r reconnect_type
  if [ "$reconnect_type" == "URL" ]; then
    echo "Enter the remote URL:"
    read -r reconnect_url
    git remote add origin "$reconnect_url"
  elif [ "$reconnect_type" == "Name" ]; then
    echo "Enter the remote name:"
    read -r reconnect_name
    git remote add origin "git@github.com:$reconnect_name.git"
  else
    echo "Invalid option. Exiting..."
    return 1
  fi
}

manage_stashes() {
  echo "1. Stash Changes"
  echo "2. List Stashes"
  echo "3. Apply Latest Stash"
  echo "4. Pop Latest Stash"
  echo "5. Clear All Stashes"
  echo "6. Show Stash Contents"
  echo "7. Apply Specific Stash"
  echo "8. Drop Specific Stash"
  echo "Enter your choice (1-8):"
  read -r stash_choice

  # Reusing your color and echo functions
  GREEN='\033[0;32m'
  BOLD='\033[1m'
  RED='\033[0;31m'
  NC='\033[0m' # No Color
  SUCCESS="✔️"
  FAILURE="❌"
  INFO="➡️"
  EXPLOSION="💥"
  
  prominent() {
      echo -e "${BOLD}${GREEN}$1${NC}"
  }
  
  bug() {
      echo -e "${BOLD}${RED}$1${NC}"
  }

  case "$stash_choice" in
    1)
      echo "Enter a message for the stash (optional):"
      read -r message
      git stash push -m "$message"
      prominent "Changes stashed. ${SUCCESS}"
      ;;
    2)
      git stash list | while IFS= read -r line; do prominent "$line"; done
      ;;
    3)
      git stash apply
      prominent "Stash applied. ${SUCCESS}"
      ;;
    4)
      git stash pop
      prominent "Stash popped and removed. ${SUCCESS}"
      ;;
    5)
      git stash clear
      prominent "All stashes cleared. ${SUCCESS}"
      ;;
    6)
      echo "Enter stash @{number} to show contents (e.g., stash@{0}):"
      read -r stash_number
      git stash show -p "$stash_number" | while IFS= read -r line; do prominent "$line"; done
      ;;
    7)
      echo "Enter stash @{number} to apply (e.g., stash@{0}):"
      read -r stash_number
      git stash apply "$stash_number"
      prominent "Specific stash applied. ${SUCCESS}"
      ;;
    8)
      echo "Enter stash @{number} to drop (e.g., stash@{0}):"
      read -r stash_number
      git stash drop "$stash_number"
      prominent "Specific stash dropped. ${SUCCESS}"
      ;;
    *)
      bug "Invalid choice! ${FAILURE}"
      ;;
  esac
}

merge_branches() {
  # Merging is useful when you want to combine the changes from one branch into another.
  echo "Enter the name of the branch you want to merge into the current branch:"
  read -r branch_to_merge

  # Check if the specified branch exists
  if git branch --list "$branch_to_merge" > /dev/null; then
    # Merge the specified branch into the current branch
    git merge "$branch_to_merge"
    echo "Branch '$branch_to_merge' merged into $(git branch --show-current)."
  else
    echo "Branch '$branch_to_merge' does not exist."
  fi
}

view_commit_history() {
  # Viewing the commit history can help you understand the changes made over time.
  echo "Showing commit history for the current branch:"
  # --oneline condenses each commit to a single line, --graph shows a text-based graph of the commits
  git log --oneline --graph
}

rebase_branch() {
  # Rebasing is a way to move or combine a sequence of commits to a new base commit.
  echo "Enter the branch you want to rebase onto:"
  read -r base_branch

  # Check if the base branch exists
  if git branch --list "$base_branch" > /dev/null; then
    # Rebase the current branch onto the specified base branch
    git rebase "$base_branch"
    echo "Current branch rebased onto '$base_branch'."
  else
    echo "Branch '$base_branch' does not exist."
  fi
}

resolve_merge_conflicts() {
  # Merge conflicts happen when Git can't automatically resolve differences in code between two commits.
  # Git will mark the conflicts in the problematic files.
  echo "Attempting to start a merge..."
  git merge

  # Check if there are merge conflicts
  if git ls-files -u | grep -q "^"; then
    echo "There are merge conflicts. Manually resolve them and then run 'git merge --continue'"
  else
    echo "No merge conflicts detected."
  fi
}

cherry_pick_commits() {
  # Cherry-picking allows you to pick a specific commit from one branch and apply it onto another.
  echo "Enter the commit hash you want to cherry-pick:"
  read -r commit_hash

  # Apply the specified commit to the current branch
  git cherry-pick "$commit_hash"
  echo "Commit '$commit_hash' cherry-picked onto $(git branch --show-current)."

  echo "Available options:"
  echo "1. Merge Branches - Combine changes from one branch into another."
  echo "2. View Commit History - Show the commit history of the current branch."
  echo "3. Rebase Branch - Move or combine commits to a new base commit."
  echo "4. Resolve Merge Conflicts - Handle conflicts when Git can't automatically merge."
  echo "5. Cherry-Pick Commits - Apply specific commits from one branch to another."
  # ... other options ...
  echo "Enter your choice:"
  read -r choice

  case "$choice" in
    1)
      merge_branches
      ;;
    2)
      view_commit_history
      ;;
    3)
      rebase_branch
      ;;
    4)
      resolve_merge_conflicts
      ;;
    5)
      cherry_pick_commits
      ;;
    # ... other cases ...
  esac
}

# --- // RESTORE_BRANCH:
restore_branch() {
  # Assuming the Python script is named 'restore_branch.py' and is in the same directory
  python3  ~/.config/shell/functions/restore_branch.py
}

revert_to_previous_version() {
    # Display recent actions from the reflog
    echo "Recent actions in the repository:"
    git reflog -10

    # Ask the user to input the reflog entry number
    echo "Enter the reflog entry number you want to revert to (e.g., HEAD@{2}):"
    read -r reflog_entry

    # Confirm the choice
    echo "Do you want to revert to this point? This action is irreversible. (yes/no):"
    read -r confirmation

    if [[ "$confirmation" == "yes" ]]; then
        # Revert to the chosen reflog entry
        if git reset --hard "$reflog_entry"; then
            echo "Reverted to $reflog_entry."
        else
            echo "Failed to revert. Make sure the reflog entry number is correct."
            return 1
        fi
    else
        echo "Revert action canceled."
        return 0
    fi
}

# Main Function
gui() {
 local choice=""
 while true; do
  echo "1. Check and generate SSH key"
  echo "2. List current remotes"
  echo "3. Update remote URL"
  echo "4. Switch from HTTPS to SSH"
  echo "5. Fetch from remote"
  echo "6. Pull from remote"
  echo "7. Push to remote"
  echo "8. List branches"
  echo "9. Switch branch"
  echo "10. Create new branch"
  echo "11. Delete branch"
  echo "12. Reconnect old repo"
  echo "13. Manage stashes"
  echo "14. Restore Branch from Commit History"
  echo "15. Exit"
  echo "Enter your choice (1-15):"
  read -r choice

  case "$choice" in
    1)  check_and_setup_ssh ;;
    2)  
        list_and_manage_remotes
        ;;
    3)  update_remote_url ;;
    4)  switch_to_ssh ;;
    5)  fetch_from_remote ;;
    6)  pull_from_remote ;;
    7)  push_to_remote ;;
    8)  list_branches ;;
    9)  switch_branch ;;
    10) create_new_branch ;;
    11) delete_branch ;;
    12) reconnect_old_repo ;;
    13) manage_stashes ;;
    14) restore_branch ;;
    15) echo "Exiting..."
        break
        ;;
    *)  echo "Invalid choice!" ;;
 esac
done
}

# --------------------------------------------------------------- // Run in the background forever:
forever() {
    if command -v "$1" >/dev/null 2>&1; then
        local log_file="${2:-/dev/null}"  # Default to /dev/null if no log file specified

        # Starting the command in the background with nohup
        nohup "$@" &> "$log_file" &
        local pid=$!
        echo "Command '$*' started in the background with PID $pid. Logging to $log_file."

        # Optionally: Save the PID for later use
        echo "$pid" > "/tmp/forever_$pid.pid"
    else
        echo "Command '$1' not found. Not executed."
    fi
}

# ------------------------------------------------------------- // Make a dir and cd into it:
mkdircd() {
    if [[ -z "$1" ]]; then
        echo "Usage: mkdircd <directory>"
        return 1
    fi

    if ! mkdir -p "$1"; then
        echo "Failed to create directory: $1"
        return 1
    fi

    if ! cd "$1"; then
        echo "Failed to navigate to directory: $1"
        return 1
    fi  # This closing brace was missing

    echo "Successfully created and navigated to directory: $1"
    return 0
}

# ------------------------------------------------------------------------- // Note taker:
notepad() {
    local file="$HOME/Documents/notes/.notes"
    [[ -f $file ]] || touch "$file"

    show_help() {
        echo "Usage: notepad [option] [arguments]"
        echo "Options:"
        echo "  (no option)    Display all notes"
        echo "  -c             Clear all notes"
        echo "  -r [number]    Display the last 'number' notes (default 10)"
        echo "  -f <YYYY-MM-DD> Filter notes by specific date"
        echo "  -h             Show this help message"
        echo "  <notepad>         Add a new note with a timestamp"
    }

    if (($#)); then
        case "$1" in
            -c)
                > "$file"
                ;;
            -r)
                local recent_count="${2:-10}"  # Default to last 10 entries if not specified
                tail -n "$recent_count" "$file"
                ;;

            -f)
                local filter_date="$2"
                if [[ -z "$filter_date" || ! $filter_date =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                echo "Usage: note -f <YYYY-MM-DD>"
                return 1
                fi
                grep "\[$filter_date" "$file"
                ;;
            -h)
                show_help
                ;;
            --)
                shift  # Remove '--' from arguments
                local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
                printf "[%s] %s\n" "$timestamp" "$*" >> "$file"
                ;;
             *)
                if [[ $1 == -* ]]; then
                    echo "Invalid option: $1"
                    show_help
                    return 1
                fi
                local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
                printf "[%s] %s\n" "$timestamp" "$*" >> "$file"
                ;;
        esac
   else
        cat "$file"
    fi
}


# -------------------------------------------------------------------------- // TRIM_A_VIDEO:
trim() {
    local input_file=$1
    local start_time=$2
    local end_time=$3
    local output_file=$4

    # Usage instructions
    if [[ -z "$input_file" || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: trim <input_file> [start_time] [end_time] [output_file]"
        echo "Format for times: HH:MM:SS or SS. Output file is optional."
        return 1
    fi

    # Validate input file
    if [[ ! -f "$input_file" ]]; then
        echo "Input file does not exist: $input_file"
        return 1
    fi

    # If not provided, prompt for start and end times
    while [[ -z "$start_time" || ! $start_time =~ ^([0-9]{2}:)?[0-5]?[0-9]:[0-5][0-9]$ ]]; do
        echo "Invalid or missing start time. Format: HH:MM:SS or SS."
        read -rep "Start time: " -e start_time
    done

    while [[ -z "$end_time" || ! $end_time =~ ^([0-9]{2}:)?[0-5]?[0-9]:[0-5][0-9]$ ]]; do
        echo "Invalid or missing end time. Format: HH:MM:SS or SS."
        read -rep "End time: " -e end_time
    done

    # Define output file name
    if [[ -z "$output_file" ]]; then
        local output_extension="${input_file##*.}"
        output_file="trimmed_output.$output_extension"
    fi

    # Execute FFmpeg command
    if ffmpeg -hide_banner -i "$input_file" -ss "$start_time" -to "$end_time" -c copy "$output_file"; then"Video trimmed successfully: $output_file"
    else
        echo "Error occurred during video trimming."
        return 1
    fi
}

# --- // SHOW_LENGTH_OF_VIDEO:
length() {
    # Help message
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: length <video_file_path>"
        echo "Display the length of a video file using ffprobe."
        return
    fi

    # Check if ffprobe is installed
    if ! command -v ffprobe &>/dev/null; then
        echo "ffprobe could not be found. Please install it first."
        return 1
    fi

    local video_file="$1"

    # Check for missing or empty video file argument
    if [[ -z "$video_file" ]]; then
        echo "No video file specified."
        read -rp "Enter video file name: " video_file
    fi

    # Validate the existence of the video file
    if [[ ! -f "$video_file" ]]; then
        return 1
    fi

    # Retrieve and format the duration of the video
    local duration
    duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$video_file")

    # Directly handle errors from ffprobe
    if [[ $? -ne 0 ]]; then
        echo "Failed to retrieve the length of the video: $video_file"
        return 1
    fi

    # Calculate hours, minutes, and seconds from duration
    local hours=$(bc <<< "$duration / 3600")
    local minutes=$(bc <<< "($duration % 3600) / 60")
    local seconds=$(bc <<< "$duration % 60")

    # Print formatted duration
    printf "Length: %02d:%02d:%02d\n" "$hours" "$minutes" "${seconds%.*}"
}

urldecode() {
    echo "$@" | awk '{gsub(/%([0-9A-Fa-f]{2})/, "\\x\\1"); print}' | xargs -0 echo -e
}

termbin() {
    cat "$1" | nc termbin.com 9999
}
