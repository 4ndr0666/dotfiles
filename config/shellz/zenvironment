# File: /home/$USER/.config/shell/zenvironment
# Author: 4ndr0666
# Edited: 04-10-24
#
# --- // 4ndr0666_ZENVIRONMENT // ========

unsetopt PROMPT_SP 2>/dev/null

# --- // XDG_SETUP:
export XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/$(id -u)}"
mkdir -p "$XDG_RUNTIME_DIR"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

# --- // DEFAULT_PROGRAMS/ENV:
export XCURSOR_SIZE=32
export MICRO_TRUECOLOR=1
export EDITOR="/usr/bin/micro"
export TERMINAL="alacritty"
export TERMINAL_PROG="alacritty"
export BROWSER="brave"
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export HISTFILE="$XDG_DATA_HOME/history"
export XINITRC="$XDG_CONFIG_HOME/x11/xinitrc"
export INPUTRC="$XDG_CONFIG_HOME/shell/inputrc"
export WINEPREFIX="$XDG_DATA_HOME/wineprefixes/default"
mkdir -p "$WINEPREFIX"
export WINEARCH="win32"
export PASSWORD_STORE_DIR="$XDG_DATA_HOME/password-store"
# export KODI_DATA="$XDG_DATA_HOME/kodi"
# export NOTMUCH_CONFIG="$XDG_CONFIG_HOME/notmuch-config"
# export ANDROID_SDK_HOME="$XDG_CONFIG_HOME/android"
export TMUX_TMPDIR="$XDG_RUNTIME_DIR"
#export ZDOTDIR="$HOME"/powerlevel10k
export CARGO_HOME="$XDG_DATA_HOME/cargo"
export GOPATH="$XDG_DATA_HOME/go"
export GOMODCACHE="$XDG_CACHE_HOME/go/mod"
export POETRY_CACHE_DIR="$XDG_CACHE_HOME/poetry"
export PYTHONSTARTUP="$XDG_CONFIG_HOME/python/pythonrc"
export PIP_DOWNLOAD_CACHE="$HOME/.pip/cache"
export SQLITE_HISTORY="$XDG_DATA_HOME/sqlite_history"

# --- // X11_SPECIFIC:
# --- OPENBOX:
# export XGD_CURRENT_DESKTOP='openbox'
# export GTK2_RC_FILES=$HOME/.gtkrc-2.0
# export _JAVA_AWT_WM_NONREPARENTING=1
# export OpenGL_GL_PREFERENCE=GLVND  # For screen tearing
# export QT_QPA_PLATFORMTHEME=qt5ct
# export MOZ_USE_XINPUT2=1
# export AWT_TOOLKIT=MToolkit wmname LG3D  # May have to install wmname
# export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel ${_JAVA_OPTIONS}"

# --- // DYNAMIC_PATH:
all_dirs=(
    "$HOME/.npm-global/bin"
    "$HOME/.cargo/bin"
    "$HOME/.gem/ruby/2.7.0/bin"  # Adjust Ruby version as needed
    "$HOME/.pyenv/bin"
    "$HOME/.pyenv/shims"
    "$HOME/.config/yarn/global/node_modules/.bin"
    "$HOME/.local/share/go/"
    "/usr/local/go/bin"
#    "${JAVA_HOME:-/usr/lib/jvm/default/bin}"  # Use JAVA_HOME if set, else default
    "$HOME/.rvm/bin"
    "$HOME/.virtualenvs"
    "$HOME/.poetry/bin"
    "$HOME/bin"
    "$HOME/.local/bin"
    "/opt/bin"
    "/sbin"
    "/usr/sbin"
    "/usr/local/sbin"
    "/usr/bin"
)

additional_dirs=($(find ~/.local/bin /Nas/Build/git/syncing/scr/ /usr/local/bin -type d))
all_dirs+=("${additional_dirs[@]}")

for dir in "${all_dirs[@]}"; do
    if [[ -d $dir ]]; then
        PATH="$PATH:$dir"
    fi
done
export PATH

typeset -U path PATH cdpath CDPATH fpath FPATH manpath MANPATH

# --- // SETOPT:
setopt append_history
setopt share_history
setopt extended_history
setopt histignorealldups  # If a new command is a duplicate, remove the older one
setopt HIST_FIND_NO_DUPS
setopt correct  # Auto correct mistakes
setopt auto_cd
setopt extended_glob
setopt nocaseglob  # Case insensitive globbing
setopt no_match
setopt notify
setopt longlistjobs
setopt hash_list_all
setopt completeinword
setopt nohup
setopt auto_pushd
setopt nobeep
setopt pushd_ignore_dups
setopt noglobdots
setopt noshwordsplit
setopt rcexpandparam  # Array expansion with parameters
setopt nocheckjobs  # Don't warn about running processes when exiting
setopt numericglobsort  # Sort filenames numerically when it makes sense
setopt pushdminus

# --- // AUTOCOMPLETE:
autoload -U compinit && compinit
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'  # Case insensitive tab completion
zstyle ':completion:*' rehash true  # Automatically find new executables in path
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"  # Colored completion (different colors for dirs/files/etc)
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' menu select
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*:descriptions' format '%U%F{cyan}%d%f%u'
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zcache
autoload -U +X bashcompinit && bashcompinit  # Automatically load bash completion functions

# -------------------------------- // LIBRARY_AND_SECURITY //
if [ -z "$LD_LIBRARY_PATH" ]; then
    export LD_LIBRARY_PATH="$HOME/.local/lib"
else
    export LD_LIBRARY_PATH="$HOME/.local/lib:/usr/local/lib/python3.11/site-packages:/usr/lib:$LD_LIBRARY_PATH"
fi

export GNUPGHOME="$HOME/.gnupg"
if [ ! -d "$GNUPGHOME" ]; then
    mkdir -p "$GNUPGHOME"
fi

chmod 700 "$GNUPGHOME"
export WGETRC="$XDG_CONFIG_HOME/wget/wgetrc"
export SUDO_ASKPASS="/usr/bin/pinentry-dmenu"
# export XAUTHORITY="$XDG_RUNTIME_DIR/Xauthority"
#export GPG_TTY="$(tty)"
#gpg-connect-agent updatestartuptty /bye >/dev/null
#gpg-connect-agent reloadagent /bye >/dev/null
#eval $(ssh-agent) && ssh-add 2&>/dev/null


# -------------------------------------------- // PAGER //
# Use Bat:
#export MANPAGER="sh -c 'col -bx | bat -l man -p'"
#export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --preview 'bat --style=numbers --color=always --line-range :500 {}'"

case "${COLORTERM}" in
    truecolor)
        # Do not overwrite; already supports truecolor
        ;;
    *)
        export COLORTERM="yes"
        ;;
esac

export FZF_DEFAULT_OPTS="
  --layout=reverse
  --height 40%
  --border
  --bind 'ctrl-a:select-all,ctrl-d:deselect-all'
  --cycle
  --inline-info
  --tiebreak=index
"
#export FZF_DEFAULT_OPTS="
#  --layout=reverse --height 40% \
#  --color=bg+:-1,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
#  --color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
#  --color=marker:#f5e0dc,fg+:#a6e3a1,prompt:#cba6f7,hl+:#f38ba8"

export LESS="R"
export LESS_TERMCAP_mb="$(printf '%b' '[1;31m')"
export LESS_TERMCAP_md="$(printf '%b' '[1;36m')"
export LESS_TERMCAP_me="$(printf '%b' '[0m')"
export LESS_TERMCAP_so="$(printf '%b' '[01;44;33m')"
export LESS_TERMCAP_se="$(printf '%b' '[0m')"
export LESS_TERMCAP_us="$(printf '%b' '[1;32m')"
export LESS_TERMCAP_ue="$(printf '%b' '[0m')"
export LESSOPEN="| /usr/bin/highlight -O ansi %s 2>/dev/null"


# ------------------------------ // KEYBINDINGS_BASED_ON_EMACS //
bindkey -e

# [PageUp] - Up a line of history
if [[ -n "${terminfo[kpp]}" ]]; then
  bindkey -M emacs "${terminfo[kpp]}" up-line-or-history
  bindkey -M viins "${terminfo[kpp]}" up-line-or-history
  bindkey -M vicmd "${terminfo[kpp]}" up-line-or-history
fi

# [PageDown] - Down a line of history
if [[ -n "${terminfo[knp]}" ]]; then
  bindkey -M emacs "${terminfo[knp]}" down-line-or-history
  bindkey -M viins "${terminfo[knp]}" down-line-or-history
  bindkey -M vicmd "${terminfo[knp]}" down-line-or-history
fi

# Start typing + [Up-Arrow] - fuzzy find history forward
if [[ -n "${terminfo[kcuu1]}" ]]; then
  autoload -U up-line-or-beginning-search
  zle -N up-line-or-beginning-search

  bindkey -M emacs "${terminfo[kcuu1]}" up-line-or-beginning-search
  bindkey -M viins "${terminfo[kcuu1]}" up-line-or-beginning-search
  bindkey -M vicmd "${terminfo[kcuu1]}" up-line-or-beginning-search
fi

# Start typing + [Down-Arrow] - fuzzy find history backward
if [[ -n "${terminfo[kcud1]}" ]]; then
  autoload -U down-line-or-beginning-search
  zle -N down-line-or-beginning-search

  bindkey -M emacs "${terminfo[kcud1]}" down-line-or-beginning-search
  bindkey -M viins "${terminfo[kcud1]}" down-line-or-beginning-search
  bindkey -M vicmd "${terminfo[kcud1]}" down-line-or-beginning-search
fi

# [Home] - Go to beginning of line
if [[ -n "${terminfo[khome]}" ]]; then
  bindkey -M emacs "${terminfo[khome]}" beginning-of-line
  bindkey -M viins "${terminfo[khome]}" beginning-of-line
  bindkey -M vicmd "${terminfo[khome]}" beginning-of-line
fi

# [End] - Go to end of line
if [[ -n "${terminfo[kend]}" ]]; then
  bindkey -M emacs "${terminfo[kend]}" end-of-line
  bindkey -M viins "${terminfo[kend]}" end-of-line
  bindkey -M vicmd "${terminfo[kend]}" end-of-line
fi

# [Shift-Tab] - move through the completion menu backwards
if [[ -n "${terminfo[kcbt]}" ]]; then
  bindkey -M emacs "${terminfo[kcbt]}" reverse-menu-complete
  bindkey -M viins "${terminfo[kcbt]}" reverse-menu-complete
  bindkey -M vicmd "${terminfo[kcbt]}" reverse-menu-complete
fi

# [Backspace] - delete backward
bindkey -M emacs '^?' backward-delete-char
bindkey -M viins '^?' backward-delete-char
bindkey -M vicmd '^?' backward-delete-char

# [Delete] - delete forward
if [[ -n "${terminfo[kdch1]}" ]]; then
  bindkey -M emacs "${terminfo[kdch1]}" delete-char
  bindkey -M viins "${terminfo[kdch1]}" delete-char
  bindkey -M vicmd "${terminfo[kdch1]}" delete-char
else
  bindkey -M emacs "^[[3~" delete-char
  bindkey -M viins "^[[3~" delete-char
  bindkey -M vicmd "^[[3~" delete-char

  bindkey -M emacs "^[3;5~" delete-char
  bindkey -M viins "^[3;5~" delete-char
  bindkey -M vicmd "^[3;5~" delete-char
fi

# Terminal modes key handling
typeset -g -A key
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# Control Left - go back a word
key[Control-Left]="${terminfo[kLFT5]}"
if [[ -n "${key[Control-Left]}" ]]; then
    bindkey -M emacs "${key[Control-Left]}" backward-word
    bindkey -M viins "${key[Control-Left]}" backward-word
    bindkey -M vicmd "${key[Control-Left]}" backward-word
fi

# Alt Left - go back a word
key[Alt-Left]="${terminfo[kLFT3]}"
if [[ -n "${key[Alt-Left]}" ]]; then
    bindkey -M emacs "${key[Alt-Left]}" backward-word
    bindkey -M viins "${key[Alt-Left]}" backward-word
    bindkey -M vicmd "${key[Alt-Left]}" backward-word
fi

# Control Right - go forward a word
key[Control-Right]="${terminfo[kRIT5]}"
if [[ -n "${key[Control-Right]}" ]]; then
    bindkey -M emacs "${key[Control-Right]}" forward-word
    bindkey -M viins "${key[Control-Right]}" forward-word
    bindkey -M vicmd "${key[Control-Right]}" forward-word
fi

# Alt Right - go forward a word
key[Alt-Right]="${terminfo[kRIT3]}"
if [[ -n "${key[Alt-Right]}" ]]; then
    bindkey -M emacs "${key[Alt-Right]}" forward-word
    bindkey -M viins "${key[Alt-Right]}" forward-word
    bindkey -M vicmd "${key[Alt-Right]}" forward-word
fi

# --- // SPEEDUP_KEYS:
if command -v xset &>/dev/null; then
    xset r rate 300 50
else
    echo "xset command not found, skipping keyboard rate configuration."
fi
