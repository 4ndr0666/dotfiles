#!/bin/zsh
#File: /home/$USER/.zshrc
#Author: 4ndr0666
#Edited: 04-10-2024
#
# --- // 4NDR0666_ZSHRC // ========

# Load colors for enhanced terminal aesthetics
autoload -U colors && colors

# --------------------------- //
#        PROMPT CONFIGURATION
# --------------------------- //

# Define a colorful and informative prompt
PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}🗁%~%{$fg[red]%}]%{$reset_color%} >%b "

# Uncomment the following lines to enable Powerlevel10k prompt
# Ensure Powerlevel10k is installed and the paths are correct
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi
# if [ -f /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme ]; then
#    source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme
# fi
# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# --------------------------- //
#        HISTORY SETTINGS
# --------------------------- //

# Increase history size and specify history file location
HISTSIZE=10000000
SAVEHIST=10000000
HISTFILE="${XDG_CACHE_HOME:-$HOME/.cache}/zsh/history"

# Enable incremental history appending
setopt inc_append_history
setopt share_history
setopt extended_history
setopt hist_ignore_all_dups    # Remove older duplicates when a new command is entered
setopt hist_verify             # Show command with history expansion applied before executing
setopt correct                 # Auto-correct mistakes in commands

# --------------------------- //
#      DISPLAY AUTO-SETUP
# --------------------------- //

# Automatically set DISPLAY if not already set (useful for Wayland/Wayfire)
if [ -z "$DISPLAY" ]; then
    if command -v loginctl &>/dev/null; then
        LOGINCTL_SESSION=$(loginctl show-user "$USER" -p Display 2>/dev/null | cut -d= -f2)
        if [ -n "$LOGINCTL_SESSION" ]; then
            export DISPLAY=$(loginctl show-session "$LOGINCTL_SESSION" -p Display | cut -d= -f2)
        fi
    fi
    if command -v ck-list-sessions &>/dev/null; then
        eval "$(ck-list-sessions | awk "/^Session/{right=0} /unix-user = '$UID'/{right=1} /x11-display = '(.+)'/{ if(right == 1) printf(\"DISPLAY=%s\\n\", \$3); }")"
    fi
fi

# --------------------------- //
#        DIRECTORY SWITCH
# --------------------------- //

# Automatically switch to home directory if current directory is root
if [ "$PWD" = "/" ]; then
    cd "$HOME"
fi

# --------------------------- //
#       ON-DEMAND REHASH
# --------------------------- //

# Rehash command to update the list of commands available in the shell
zshcache_time="$(date +%s%N)"
rehash_precmd() {
  if [[ -a /var/cache/zsh/pacman ]]; then
    local paccache_time="$(date -r /var/cache/zsh/pacman +%s%N)"
    if (( zshcache_time < paccache_time )); then
      rehash
      zshcache_time="$paccache_time"
    fi
  fi
}
autoload -Uz add-zsh-hook || autoload -U add-zsh-hook
add-zsh-hook -Uz precmd rehash_precmd

# --------------------------- //
#        SOURCE FILES
# --------------------------- //

# Prevent sourcing multiple times
if [[ -z "$FUNCTIONS_ZSH_SOURCED" ]]; then
    export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
    
    # Source custom functions
    if [ -f "$XDG_CONFIG_HOME/shellz/functions/functions.zsh" ]; then
        source "$XDG_CONFIG_HOME/shellz/functions/functions.zsh"
        export FUNCTIONS_ZSH_SOURCED=1
    else
        echo "Warning: functions.zsh not found at $XDG_CONFIG_HOME/shellz/functions/functions.zsh"
    fi
fi

# Source environment and alias configurations
for config_file in "$XDG_CONFIG_HOME/shellz/zenvironment" "$XDG_CONFIG_HOME/shellz/aliasrc"; do
    if [ -f "$config_file" ]; then
        source "$config_file"
    else
        echo "Warning: $config_file not found"
    fi
done

# --------------------------- //
#        HELPER ALIASES
# --------------------------- //

# Reload .zshrc without restarting the terminal
alias reload="source ~/.zshrc"

# --------------------------- //
#         NVM CONFIGURATION
# --------------------------- //

# Node Version Manager setup
export NVM_DIR="$HOME/.config/nvm"

if [ -s "$NVM_DIR/nvm.sh" ]; then
    source "$NVM_DIR/nvm.sh"
else
    echo "Warning: NVM script not found at $NVM_DIR/nvm.sh"
fi

if [ -s "$NVM_DIR/bash_completion" ]; then
    source "$NVM_DIR/bash_completion"
else
    echo "Warning: NVM bash completion script not found at $NVM_DIR/bash_completion"
fi

# --------------------------- //
#       GPG ENVIRONMENT
# --------------------------- //

# Source GPG environment variables if present
if [ -f "$XDG_CONFIG_HOME/shellz/gpg_env" ]; then
    source "$XDG_CONFIG_HOME/shellz/gpg_env"
fi

# --------------------------- //
#       KEYBINDINGS (EMACS MODE)
# --------------------------- //

# Set up keybindings based on Emacs mode
bindkey -e  # Enable Emacs keybindings
# Uncomment the following line to enable Vi mode instead
# bindkey -v

# PageUp and PageDown bindings for history navigation
if [[ -n "${terminfo[kpp]}" ]]; then
    bindkey -M emacs "${terminfo[kpp]}" up-line-or-history
    bindkey -M viins "${terminfo[kpp]}" up-line-or-history
    bindkey -M vicmd "${terminfo[kpp]}" up-line-or-history
fi

if [[ -n "${terminfo[knp]}" ]]; then
    bindkey -M emacs "${terminfo[knp]}" down-line-or-history
    bindkey -M viins "${terminfo[knp]}" down-line-or-history
    bindkey -M vicmd "${terminfo[knp]}" down-line-or-history
fi

# Arrow keys for fuzzy history search
if [[ -n "${terminfo[kcuu1]}" ]]; then
    autoload -U up-line-or-beginning-search
    zle -N up-line-or-beginning-search

    bindkey -M emacs "${terminfo[kcuu1]}" up-line-or-beginning-search
    bindkey -M viins "${terminfo[kcuu1]}" up-line-or-beginning-search
    bindkey -M vicmd "${terminfo[kcuu1]}" up-line-or-beginning-search
fi

if [[ -n "${terminfo[kcud1]}" ]]; then
    autoload -U down-line-or-beginning-search
    zle -N down-line-or-beginning-search

    bindkey -M emacs "${terminfo[kcud1]}" down-line-or-beginning-search
    bindkey -M viins "${terminfo[kcud1]}" down-line-or-beginning-search
    bindkey -M vicmd "${terminfo[kcud1]}" down-line-or-beginning-search
fi

# Home and End key bindings
if [[ -n "${terminfo[khome]}" ]]; then
    bindkey -M emacs "${terminfo[khome]}" beginning-of-line
    bindkey -M viins "${terminfo[khome]}" beginning-of-line
    bindkey -M vicmd "${terminfo[khome]}" beginning-of-line
fi

if [[ -n "${terminfo[kend]}" ]]; then
    bindkey -M emacs "${terminfo[kend]}" end-of-line
    bindkey -M viins "${terminfo[kend]}" end-of-line
    bindkey -M vicmd "${terminfo[kend]}" end-of-line
fi

# Shift-Tab for reverse menu completion
if [[ -n "${terminfo[kcbt]}" ]]; then
    bindkey -M emacs "${terminfo[kcbt]}" reverse-menu-complete
    bindkey -M viins "${terminfo[kcbt]}" reverse-menu-complete
    bindkey -M vicmd "${terminfo[kcbt]}" reverse-menu-complete
fi

# Backspace and Delete key bindings
bindkey -M emacs '^?' backward-delete-char
bindkey -M viins '^?' backward-delete-char
bindkey -M vicmd '^?' backward-delete-char

if [[ -n "${terminfo[kdch1]}" ]]; then
    bindkey -M emacs "${terminfo[kdch1]}" delete-char
    bindkey -M viins "${terminfo[kdch1]}" delete-char
    bindkey -M vicmd "${terminfo[kdch1]}" delete-char
else
    # Fallback for Delete key
    bindkey -M emacs "^[[3~" delete-char
    bindkey -M viins "^[[3~" delete-char
    bindkey -M vicmd "^[[3~" delete-char

    bindkey -M emacs "^[3;5~" delete-char
    bindkey -M viins "^[3;5~" delete-char
    bindkey -M vicmd "^[3;5~" delete-char
fi

# Enable keypad mode if supported
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
    autoload -Uz add-zle-hook-widget
    function zle_application_mode_start { echoti smkx }
    function zle_application_mode_stop { echoti rmkx }
    add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
    add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# Control and Alt key bindings for word navigation
typeset -g -A key

# Control Left - Go back a word
key[Control-Left]="${terminfo[kLFT5]}"
if [[ -n "${key[Control-Left]}" ]]; then
    bindkey -M emacs "${key[Control-Left]}" backward-word
    bindkey -M viins "${key[Control-Left]}" backward-word
    bindkey -M vicmd "${key[Control-Left]}" backward-word
fi

# Control Right - Go forward a word
key[Control-Right]="${terminfo[kRIT5]}"
if [[ -n "${key[Control-Right]}" ]]; then
    bindkey -M emacs "${key[Control-Right]}" forward-word
    bindkey -M viins "${key[Control-Right]}" forward-word
    bindkey -M vicmd "${key[Control-Right]}" forward-word
fi

# Alt Left - Go back a word
key[Alt-Left]="${terminfo[kLFT3]}"
if [[ -n "${key[Alt-Left]}" ]]; then
    bindkey -M emacs "${key[Alt-Left]}" backward-word
    bindkey -M viins "${key[Alt-Left]}" backward-word
    bindkey -M vicmd "${key[Alt-Left]}" backward-word
fi

# Alt Right - Go forward a word
key[Alt-Right]="${terminfo[kRIT3]}"
if [[ -n "${key[Alt-Right]}" ]]; then
    bindkey -M emacs "${key[Alt-Right]}" forward-word
    bindkey -M viins "${key[Alt-Right]}" forward-word
    bindkey -M vicmd "${key[Alt-Right]}" forward-word
fi

# --------------------------- //
#         HIGHLIGHTING
# --------------------------- //

# Configure zsh highlighting styles
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES=(
    'builtin' 'fg=green'
    'bracket' 'fg=orange'
    'cursor' 'standout'
    'pattern' 'fg=magenta,bold'
)
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)

# --------------------------- //
#          PLUGINS
# --------------------------- //

# Directory where zsh plugins are stored
source_dir="/usr/share/zsh/plugins/"
zsh_files_found=false

# Source all .zsh plugin files in the source_dir
while IFS= read -r file; do
    zsh_files_found=true
    source "$file"
done < <(find "$source_dir" -iname '*.zsh' 2>/dev/null)

# Warn if no plugins are found
if [ "$zsh_files_found" = false ]; then
    echo "Warning: No zsh plugins found in $source_dir."
fi

# Example Plugin Sources (Commented Out)
# source /usr/share/zsh/plugins/zsh-you-should-use/you-should-use.plugin.zsh
# source /usr/share/zsh/plugins/zsh-autocomplete/zsh-autocomplete.plugin.zsh 
# source /usr/share/zsh/plugins/zsh-fzf-plugin/fzf.plugin.zsh 
# source /usr/share/zsh/plugins/zsh-sudo/sudo.plugin.zsh 
# source /usr/share/zsh/plugins/zsh-systemd/systemd.plugin.zsh 
# source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh 
# source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh 
# source /usr/share/zsh/plugins/zsh-extract/extract.plugin.zsh 

# Specific Plugin Sources
# Load Find-The-Command plugin without updates and in quiet mode
. /usr/share/doc/find-the-command/ftc.zsh noupdate quiet

# Load Zsh Syntax Highlighting plugin
. /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh 
