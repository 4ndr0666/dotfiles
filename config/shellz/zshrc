#!/bin/zsh
# File: /home/$USER/.zshrc
# Author: 4ndr0666
# Edited: 09-22-2024


# ======================================= // ZSHRC // 
# --- // Prompt:
autoload -U colors && colors    
unsetopt PROMPT_SP 2>/dev/null
#PROMPT='%F{32}%n%f%F{166}@%f%F{64}%m:%F{166}%~%f%F{15}$%f '
#RPROMPT='%F{15}(%F{166}%D{%H:%M}%F{15})%f'
#PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%🗁%{$fg[red]%}]%{$reset_color%}$%b "
setopt autocd		# Automatically cd into typed directory.
stty stop undef		# Disable ctrl-s to freeze terminal.
setopt interactive_comments

# Uncomment the following lines to enable Powerlevel10k prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
if [ -f /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme ]; then
   source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme
fi
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


# ------------------------------------------------------- // Basic auto/tab complete //
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots)		# Include hidden files.

# -------------------------------------------------------------------- // History //
HISTSIZE=10000000
SAVEHIST=10000000
HISTFILE="${XDG_CACHE_HOME:-$HOME/.cache}/zsh/history"

# Enable incremental history appending
setopt inc_append_history
setopt share_history
setopt extended_history
setopt hist_ignore_all_dups    # Remove older duplicates when a new command is entered
setopt hist_verify             # Show command with history expansion applied before executing
setopt correct                 # Auto-correct mistakes in commands

# ----------------------------------------------------------------- // DISPLAY // 
# === // Autoset DISPLAY:
if [ -z "$DISPLAY" ]; then
    if command -v loginctl &>/dev/null; then
        LOGINCTL_SESSION=$(loginctl show-user "$USER" -p Display 2>/dev/null | cut -d= -f2)
        if [ -n "$LOGINCTL_SESSION" ]; then
            export DISPLAY=$(loginctl show-session "$LOGINCTL_SESSION" -p Display | cut -d= -f2)
        fi
    fi
    if command -v ck-list-sessions &>/dev/null; then
        eval "$(ck-list-sessions | awk "/^Session/{right=0} /unix-user = '$UID'/{right=1} /x11-display = '(.+)'/{ if(right == 1) printf(\"DISPLAY=%s\\n\", \$3); }")"
    fi
fi

# ------------------------------------------------------------- // ON_DEMAND_REHASH //
zshcache_time="$(date +%s%N)"
rehash_precmd() {
  if [[ -a /var/cache/zsh/pacman ]]; then
    local paccache_time="$(date -r /var/cache/zsh/pacman +%s%N)"
    if (( zshcache_time < paccache_time )); then
      rehash
      zshcache_time="$paccache_time"
    fi
  fi
}
autoload -Uz add-zsh-hook || autoload -U add-zsh-hook
add-zsh-hook -Uz precmd rehash_precmd

# -------------------------------------------------------------------- // FILE_SOURCING //
alias reload="source ~/.zshrc"

if [[ -z "$FUNCTIONS_ZSH_SOURCED" ]]; then
    export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
    
    # Source custom functions
    if [ -f "$XDG_CONFIG_HOME/shellz/functions/functions.zsh" ]; then
        source "$XDG_CONFIG_HOME/shellz/functions/functions.zsh"
        export FUNCTIONS_ZSH_SOURCED=1
    else
        echo "Warning: functions.zsh not found at $XDG_CONFIG_HOME/shellz/functions/functions.zsh"
    fi
fi

# Source environment and alias configurations
for config_file in "$XDG_CONFIG_HOME/shellz/zenvironment" "$XDG_CONFIG_HOME/shellz/aliasrc"; do
    if [ -f "$config_file" ]; then
        source "$config_file"
    else
        echo "Warning: $config_file not found"
    fi
done

# ------------------------------------------- // NVM //
export NVM_DIR="$HOME/.config/nvm"

if [ -s "$NVM_DIR/nvm.sh" ]; then
    source "$NVM_DIR/nvm.sh"
else
    echo "Warning: NVM script not found at $NVM_DIR/nvm.sh"
fi

if [ -s "$NVM_DIR/bash_completion" ]; then
    source "$NVM_DIR/bash_completion"
else
    echo "Warning: NVM bash completion script not found at $NVM_DIR/bash_completion"
fi

# --------------------------------------------------------- // GPG //
# --- // Source GPG environment variables if present:
if [ -f "$XDG_CONFIG_HOME/shellz/gpg_env" ]; then
    source "$XDG_CONFIG_HOME/shellz/gpg_env"
fi

# -------------------------------------------------------- // KEYBINDINGS(vi mode) //
bindkey -v
export KEYTIMEOUT=1

# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

# Change cursor shape for different vi modes.
function zle-keymap-select () {
    case $KEYMAP in
        vicmd) echo -ne '\e[1 q';;      # block
        viins|main) echo -ne '\e[5 q';; # beam
    esac
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

# Use lf to switch directories and bind it to ctrl-o
lfcd () {
    tmp="$(mktemp -uq)"
    trap 'rm -f $tmp >/dev/null 2>&1 && trap - HUP INT QUIT TERM PWR EXIT' HUP INT QUIT TERM PWR EXIT
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}
bindkey -s '^o' '^ulfcd\n'

bindkey -s '^a' '^ubc -lq\n'

bindkey -s '^f' '^ucd "$(dirname "$(fzf)")"\n'

bindkey '^[[P' delete-char

# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line
bindkey -M vicmd '^[[P' vi-delete-char
bindkey -M vicmd '^e' edit-command-line
bindkey -M visual '^[[P' vi-delete

# --------------------------------------------------------------------- // PLUGINS // 
# --- // Auto-loader:
#source_dir="/usr/share/zsh/plugins/"
#zsh_files_found=false

# Source all .zsh plugin files in the source_dir
#while IFS= read -r file; do
#    zsh_files_found=true
#    source "$file"
#done < <(find "$source_dir" -iname '*.zsh' 2>/dev/null)

# Warn if no plugins are found
#if [ "$zsh_files_found" = false ]; then
#    echo "Warning: No zsh plugins found in $source_dir."
#fi


# --- // Specific Sources:
source /usr/share/zsh/plugins/zsh-autocomplete/zsh-autocomplete.plugin.zsh
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh
source /usr/share/zsh/plugins/zsh-extract/extract.plugin.zsh
source /usr/share/zsh/plugins/zsh-fzf-plugin/fzf.plugin.zsh
source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
source /usr/share/zsh/plugins/zsh-sudo/sudo.plugin.zsh
source /usr/share/zsh/plugins/zsh-systemd/systemd.plugin.zsh
source /usr/share/zsh/plugins/zsh-you-should-use/you-should-use.plugin.zsh
#source /usr/share/doc/find-the-command/ftc.zsh noupdate quiet

source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh 2>/dev/null
